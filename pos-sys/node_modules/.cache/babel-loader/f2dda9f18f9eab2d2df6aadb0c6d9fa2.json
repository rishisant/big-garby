{"ast":null,"code":"import _classCallCheck from \"/Users/santanamu/Desktop/pos-p3/pos-sys/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/santanamu/Desktop/pos-p3/pos-sys/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/santanamu/Desktop/pos-p3/pos-sys/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/santanamu/Desktop/pos-p3/pos-sys/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/santanamu/Desktop/pos-p3/pos-sys/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/santanamu/Desktop/pos-p3/pos-sys/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport { TextInput } from 'react-native';\nexport default (function (Navigator, navigatorConfig) {\n  var _class, _temp;\n  return _temp = _class = /*#__PURE__*/function (_React$Component) {\n    _inherits(KeyboardAwareNavigator, _React$Component);\n    function KeyboardAwareNavigator() {\n      var _getPrototypeOf2;\n      var _this;\n      _classCallCheck(this, KeyboardAwareNavigator);\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(KeyboardAwareNavigator)).call.apply(_getPrototypeOf2, [this].concat(args)));\n      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_previouslyFocusedTextInput\", null);\n      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_handleGestureBegin\", function () {\n        _this._previouslyFocusedTextInput = TextInput.State.currentlyFocusedInput ? TextInput.State.currentlyFocusedInput() : TextInput.State.currentlyFocusedField();\n        if (_this._previouslyFocusedTextInput) {\n          TextInput.State.blurTextInput(_this._previouslyFocusedTextInput);\n        }\n        _this.props.onGestureBegin && _this.props.onGestureBegin();\n      });\n      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_handleGestureCanceled\", function () {\n        if (_this._previouslyFocusedTextInput) {\n          TextInput.State.focusTextInput(_this._previouslyFocusedTextInput);\n        }\n        _this.props.onGestureCanceled && _this.props.onGestureCanceled();\n      });\n      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_handleGestureEnd\", function () {\n        _this._previouslyFocusedTextInput = null;\n        _this.props.onGestureFinish && _this.props.onGestureFinish();\n      });\n      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_handleTransitionStart\", function (transitionProps, prevTransitionProps) {\n        // TODO: We should not even have received the transition start event\n        // in the case where the index did not change, I believe. We\n        // should revisit this after 2.0 release.\n        if (transitionProps.index !== prevTransitionProps.index) {\n          var currentField = TextInput.State.currentlyFocusedInput ? TextInput.State.currentlyFocusedInput() : TextInput.State.currentlyFocusedField();\n          if (currentField) {\n            TextInput.State.blurTextInput(currentField);\n          }\n        }\n        var onTransitionStart = _this.props.onTransitionStart || navigatorConfig.onTransitionStart;\n        onTransitionStart && onTransitionStart(transitionProps, prevTransitionProps);\n      });\n      return _this;\n    }\n    _createClass(KeyboardAwareNavigator, [{\n      key: \"render\",\n      value: function render() {\n        return /*#__PURE__*/React.createElement(Navigator, _extends({}, this.props, {\n          onGestureBegin: this._handleGestureBegin,\n          onGestureCanceled: this._handleGestureCanceled,\n          onGestureEnd: this._handleGestureEnd,\n          onTransitionStart: this._handleTransitionStart\n        }));\n      }\n    }]);\n    return KeyboardAwareNavigator;\n  }(React.Component), _defineProperty(_class, \"router\", Navigator.router), _defineProperty(_class, \"navigationOptions\", Navigator.navigationOptions), _temp;\n});","map":null,"metadata":{},"sourceType":"module"}