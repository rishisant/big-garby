{"ast":null,"code":"import * as React from 'react';\nimport NavigationContext from './NavigationContext';\n\n/**\n * Hook to take care of emitting `focus` and `blur` events.\n */\nexport default function useFocusEvents(_ref) {\n  var state = _ref.state,\n    emitter = _ref.emitter;\n  var navigation = React.useContext(NavigationContext);\n  var lastFocusedKeyRef = React.useRef();\n  var currentFocusedKey = state.routes[state.index].key; // When the parent screen changes its focus state, we also need to change child's focus\n  // Coz the child screen can't be focused if the parent screen is out of focus\n\n  React.useEffect(function () {\n    return navigation === null || navigation === void 0 ? void 0 : navigation.addListener('focus', function () {\n      lastFocusedKeyRef.current = currentFocusedKey;\n      emitter.emit({\n        type: 'focus',\n        target: currentFocusedKey\n      });\n    });\n  }, [currentFocusedKey, emitter, navigation]);\n  React.useEffect(function () {\n    return navigation === null || navigation === void 0 ? void 0 : navigation.addListener('blur', function () {\n      lastFocusedKeyRef.current = undefined;\n      emitter.emit({\n        type: 'blur',\n        target: currentFocusedKey\n      });\n    });\n  }, [currentFocusedKey, emitter, navigation]);\n  React.useEffect(function () {\n    var lastFocusedKey = lastFocusedKeyRef.current;\n    lastFocusedKeyRef.current = currentFocusedKey; // We wouldn't have `lastFocusedKey` on initial mount\n    // Fire focus event for the current route on mount if there's no parent navigator\n\n    if (lastFocusedKey === undefined && !navigation) {\n      emitter.emit({\n        type: 'focus',\n        target: currentFocusedKey\n      });\n    } // We should only emit events when the focused key changed and navigator is focused\n    // When navigator is not focused, screens inside shouldn't receive focused status either\n\n    if (lastFocusedKey === currentFocusedKey || !(navigation ? navigation.isFocused() : true)) {\n      return;\n    }\n    if (lastFocusedKey === undefined) {\n      // Only fire events after initial mount\n      return;\n    }\n    emitter.emit({\n      type: 'blur',\n      target: lastFocusedKey\n    });\n    emitter.emit({\n      type: 'focus',\n      target: currentFocusedKey\n    });\n  }, [currentFocusedKey, emitter, navigation]);\n}","map":null,"metadata":{},"sourceType":"module"}