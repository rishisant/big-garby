{"ast":null,"code":"import _slicedToArray from \"/Users/santanamu/Desktop/pos-p3/pos-sys/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport { useState } from 'react';\nimport useNavigation from './useNavigation';\n/**\n * Hook to get the current focus state of the screen. Returns a `true` if screen is focused, otherwise `false`.\n * This can be used if a component needs to render something based on the focus state.\n */\n\nexport default function useIsFocused() {\n  var navigation = useNavigation();\n  var _useState = useState(navigation.isFocused),\n    _useState2 = _slicedToArray(_useState, 2),\n    isFocused = _useState2[0],\n    setIsFocused = _useState2[1];\n  var valueToReturn = navigation.isFocused();\n  if (isFocused !== valueToReturn) {\n    // If the value has changed since the last render, we need to update it.\n    // This could happen if we missed an update from the event listeners during re-render.\n    // React will process this update immediately, so the old subscription value won't be committed.\n    // It is still nice to avoid returning a mismatched value though, so let's override the return value.\n    // This is the same logic as in https://github.com/facebook/react/tree/master/packages/use-subscription\n    setIsFocused(valueToReturn);\n  }\n  React.useEffect(function () {\n    var unsubscribeFocus = navigation.addListener('focus', function () {\n      return setIsFocused(true);\n    });\n    var unsubscribeBlur = navigation.addListener('blur', function () {\n      return setIsFocused(false);\n    });\n    return function () {\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [navigation]);\n  React.useDebugValue(valueToReturn);\n  return valueToReturn;\n}","map":null,"metadata":{},"sourceType":"module"}