{"ast":null,"code":"import { nanoid } from 'nanoid/non-secure';\nexport default function createMemoryHistory() {\n  var index = 0;\n  var items = []; // Pending callbacks for `history.go(n)`\n  // We might modify the callback stored if it was interrupted, so we have a ref to identify it\n\n  var pending = [];\n  var interrupt = function interrupt() {\n    // If another history operation was performed we need to interrupt existing ones\n    // This makes sure that calls such as `history.replace` after `history.go` don't happen\n    // Since otherwise it won't be correct if something else has changed\n    pending.forEach(function (it) {\n      var cb = it.cb;\n      it.cb = function () {\n        return cb(true);\n      };\n    });\n  };\n  var history = {\n    get index() {\n      var _window$history$state;\n\n      // We store an id in the state instead of an index\n      // Index could get out of sync with in-memory values if page reloads\n      var id = (_window$history$state = window.history.state) === null || _window$history$state === void 0 ? void 0 : _window$history$state.id;\n      if (id) {\n        var _index = items.findIndex(function (item) {\n          return item.id === id;\n        });\n        return _index > -1 ? _index : 0;\n      }\n      return 0;\n    },\n    get: function get(index) {\n      return items[index];\n    },\n    backIndex: function backIndex(_ref) {\n      var path = _ref.path; // We need to find the index from the element before current to get closest path to go back to\n      for (var i = index - 1; i >= 0; i--) {\n        var item = items[i];\n        if (item.path === path) {\n          return i;\n        }\n      }\n      return -1;\n    },\n    push: function push(_ref2) {\n      var path = _ref2.path,\n        state = _ref2.state;\n      interrupt();\n      var id = nanoid(); // When a new entry is pushed, all the existing entries after index will be inaccessible\n      // So we remove any existing entries after the current index to clean them up\n\n      items = items.slice(0, index + 1);\n      items.push({\n        path: path,\n        state: state,\n        id: id\n      });\n      index = items.length - 1; // We pass empty string for title because it's ignored in all browsers except safari\n      // We don't store state object in history.state because:\n      // - browsers have limits on how big it can be, and we don't control the size\n      // - while not recommended, there could be non-serializable data in state\n\n      window.history.pushState({\n        id: id\n      }, '', path);\n    },\n    replace: function replace(_ref3) {\n      var _window$history$state2, _window$history$state3;\n      var path = _ref3.path,\n        state = _ref3.state;\n      interrupt();\n      var id = (_window$history$state2 = (_window$history$state3 = window.history.state) === null || _window$history$state3 === void 0 ? void 0 : _window$history$state3.id) !== null && _window$history$state2 !== void 0 ? _window$history$state2 : nanoid();\n      if (!items.length || items.findIndex(function (item) {\n        return item.id === id;\n      }) < 0) {\n        // There are two scenarios for creating an array with only one history record:\n        // - When loaded id not found in the items array, this function by default will replace\n        //   the first item. We need to keep only the new updated object, otherwise it will break\n        //   the page when navigating forward in history.\n        // - This is the first time any state modifications are done\n        //   So we need to push the entry as there's nothing to replace\n        items = [{\n          path: path,\n          state: state,\n          id: id\n        }];\n        index = 0;\n      } else {\n        items[index] = {\n          path: path,\n          state: state,\n          id: id\n        };\n      }\n      window.history.replaceState({\n        id: id\n      }, '', path);\n    },\n    // `history.go(n)` is asynchronous, there are couple of things to keep in mind:\n    // - it won't do anything if we can't go `n` steps, the `popstate` event won't fire.\n    // - each `history.go(n)` call will trigger a separate `popstate` event with correct location.\n    // - the `popstate` event fires before the next frame after calling `history.go(n)`.\n    // This method differs from `history.go(n)` in the sense that it'll go back as many steps it can.\n    go: function go(n) {\n      interrupt(); // To guard against unexpected navigation out of the app we will assume that browser history is only as deep as the length of our memory\n      // history. If we don't have an item to navigate to then update our index and navigate as far as we can without taking the user out of the app.\n\n      var nextIndex = index + n;\n      var lastItemIndex = items.length - 1;\n      if (n < 0 && !items[nextIndex]) {\n        // Attempted to navigate beyond the first index. Negating the current index will align the browser history with the first item.\n        n = -index;\n        index = 0;\n      } else if (n > 0 && nextIndex > lastItemIndex) {\n        // Attempted to navigate past the last index. Calculate how many indices away from the last index and go there.\n        n = lastItemIndex - index;\n        index = lastItemIndex;\n      } else {\n        index = nextIndex;\n      }\n      if (n === 0) {\n        return;\n      } // When we call `history.go`, `popstate` will fire when there's history to go back to\n      // So we need to somehow handle following cases:\n      // - There's history to go back, `history.go` is called, and `popstate` fires\n      // - `history.go` is called multiple times, we need to resolve on respective `popstate`\n      // - No history to go back, but `history.go` was called, browser has no API to detect it\n\n      return new Promise(function (resolve, reject) {\n        var done = function done(interrupted) {\n          clearTimeout(timer);\n          if (interrupted) {\n            reject(new Error('History was changed during navigation.'));\n            return;\n          } // There seems to be a bug in Chrome regarding updating the title\n          // If we set a title just before calling `history.go`, the title gets lost\n          // However the value of `document.title` is still what we set it to\n          // It's just not displayed in the tab bar\n          // To update the tab bar, we need to reset the title to something else first (e.g. '')\n          // And set the title to what it was before so it gets applied\n          // It won't work without setting it to empty string coz otherwise title isn't changing\n          // Which means that the browser won't do anything after setting the title\n          var title = window.document.title;\n          window.document.title = '';\n          window.document.title = title;\n          resolve();\n        };\n        pending.push({\n          ref: done,\n          cb: done\n        }); // If navigation didn't happen within 100ms, assume that it won't happen\n        // This may not be accurate, but hopefully it won't take so much time\n        // In Chrome, navigation seems to happen instantly in next microtask\n        // But on Firefox, it seems to take much longer, around 50ms from our testing\n        // We're using a hacky timeout since there doesn't seem to be way to know for sure\n\n        var timer = setTimeout(function () {\n          var index = pending.findIndex(function (it) {\n            return it.ref === done;\n          });\n          if (index > -1) {\n            pending[index].cb();\n            pending.splice(index, 1);\n          }\n        }, 100);\n        var onPopState = function onPopState() {\n          var _window$history$state4;\n          var id = (_window$history$state4 = window.history.state) === null || _window$history$state4 === void 0 ? void 0 : _window$history$state4.id;\n          var currentIndex = items.findIndex(function (item) {\n            return item.id === id;\n          }); // Fix createMemoryHistory.index variable's value\n          // as it may go out of sync when navigating in the browser.\n\n          index = Math.max(currentIndex, 0);\n          var last = pending.pop();\n          window.removeEventListener('popstate', onPopState);\n          last === null || last === void 0 ? void 0 : last.cb();\n        };\n        window.addEventListener('popstate', onPopState);\n        window.history.go(n);\n      });\n    },\n    // The `popstate` event is triggered when history changes, except `pushState` and `replaceState`\n    // If we call `history.go(n)` ourselves, we don't want it to trigger the listener\n    // Here we normalize it so that only external changes (e.g. user pressing back/forward) trigger the listener\n    listen: function listen(listener) {\n      var onPopState = function onPopState() {\n        if (pending.length) {\n          // This was triggered by `history.go(n)`, we shouldn't call the listener\n          return;\n        }\n        listener();\n      };\n      window.addEventListener('popstate', onPopState);\n      return function () {\n        return window.removeEventListener('popstate', onPopState);\n      };\n    }\n  };\n  return history;\n}","map":null,"metadata":{},"sourceType":"module"}